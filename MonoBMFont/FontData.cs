using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace MonoBMFont {
    /// <summary> Represents BMFont data which can be used for font rendering. </summary>
    [DataContract, XmlRoot("font")]
    public class FontData {
        [XmlElement("info")]
        public FontInfo Info { get; set; }

        [XmlElement("common")]
        public FontCommon Common { get; set; }

        [XmlArray("pages"), XmlArrayItem("page")]
        public List<FontTexture> Textures { get; set; }

        [XmlArray("chars"), XmlArrayItem("char")]
        public List<FontGlyph> Chars { get; set; }

        [XmlArray("kernings"), XmlArrayItem("kerning")]
        public List<FontKerningPair> Kernings { get; set; }

        /// <summary> Generates the kerning map.</summary>
        public Dictionary<char, Dictionary<char, int>> GenerateKerningMap() {
            var kerningMap = new Dictionary<char, Dictionary<char, int>>();
            foreach (var kerning in Kernings) {
                Dictionary<char, int> existing;
                if (!kerningMap.TryGetValue((char)kerning.First, out existing)) {
                    existing = new Dictionary<char, int>();
                    kerningMap.Add((char)kerning.First, existing);
                }

                existing.Add((char)kerning.Second, kerning.Amount);
            }

            return kerningMap;
        }

        /// <summary> Gets the texture name generated by BMFont, consisting of font file name with added "_N.png".
        /// </summary>
        /// <param name="fontName">Font file name.</param>
        /// <param name="texPageIndex">Texture page index (N in "fontname_N.png", usually 0.</param>
        /// <returns>Corresponding texture for the font</returns>
        public static string GetTextureNameForFont(string fontName, int texPageIndex = 0) {
            var textureFilename = Path.GetFileNameWithoutExtension(fontName) + "_" + texPageIndex + ".png";
            var texturePath = Path.GetDirectoryName(fontName);
            return (texturePath != null) ? Path.Combine(texturePath, textureFilename) : textureFilename;
        }

        /// <summary>Loads BMFont data from the specified XML text reader.</summary>
        /// <param name="reader">The XML text reader.</param>
        /// <returns>BMFont data.</returns>
        public static FontData Load(TextReader reader) {
            var deserializer = new XmlSerializer(typeof (FontData));
            return (FontData)deserializer.Deserialize(reader);
        }

        /// <summary>Loads BMFont data from the specified XML data stream.</summary>
        /// <param name="stream">The XML data stream.</param>
        /// <returns>BMFont data.</returns>
        public static FontData Load(Stream stream) {
            var deserializer = new XmlSerializer(typeof (FontData));
            return (FontData)deserializer.Deserialize(stream);
        }
    }
}